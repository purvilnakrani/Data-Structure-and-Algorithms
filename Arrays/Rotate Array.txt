// class Solution {
//     public void rotate(int[] nums, int k) {
//       int n=nums.length;
//         if(k>n){
//             k=k%n;
//         }
//         int i=0;
//         int j=n-1;
//         while(i<j){
//             int temp=nums[i];
//             nums[i++]=nums[j];
//             nums[j--]=temp;
//          }
//         int x=0;
//         int l=k-1;
//         while(x<l){
//             int temp=nums[x];
//             nums[x++]=nums[l];
//             nums[l--]=temp;
//          }
//          int m=k;
//         int o=n-1;
//         while(m<o){
//             int temp=nums[m];
//             nums[m++]=nums[o];
//             nums[o--]=temp;
//          }
//     }
// }
class Solution {
    public void rotate(int[] nums, int k) {
        int n= nums.length;
        k=k%n;
        reverse(nums, 0, n);
        reverse(nums, 0, k);
        reverse(nums, k, n);
    }
    public void reverse(int arr[], int start, int end){
        int i=start;
        int j=end-1;
        while(i<j){
            int temp=arr[i];
            arr[i++]=arr[j];
            arr[j--]=temp;
            // i++;
            // j--;
         }
    }
}