class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a,b) -> a[0]-b[0]);
        List<int[]> ans= new ArrayList();
        ans.add(intervals[0]);
        int j=0;
        for(int i=1; i<intervals.length; i++){
            int[] row= ans.get(j);
            if(intervals[i][0]<=row[1]){
                row[1]=Math.max(row[1],intervals[i][1]);
                }
                else{
                    ans.add(intervals[i]);
                    j++;
                }
            }
            int[][] arr= new int[j+1][2];
            for(int i=0; i<arr.length; i++){
                arr[i]=ans.get(i);
            }
        return arr;
    }
}
// class Solution {
//     public int[][] merge(int[][] intervals) {
//         List<List<Integer>> ans=new ArrayList();
//         Arrays.sort(inervals, (a,b) -> a[0]-b[0]);
        
//         for(int i=0; i<intervals.length-1; i++){
//             List<Integer> row- new ArrayList();
//             if(intervals[i][1]>intervals[i+1][0] && intervals[i][1]<intervals[i+1][1] ){
//                 row.add(intervals[i][0]);
//                 row.add(intervals[i+1][1]);
                
//             }
//         }
//     }
// }